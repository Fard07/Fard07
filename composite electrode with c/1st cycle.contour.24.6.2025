import os
import matplotlib.pyplot as plt
import numpy as np
import pybamm
import pandas as pd
import timeit
from matplotlib import style, cm, ticker
import matplotlib.patches as mpatches
style.use('ggplot')
pybamm.set_logging_level("INFO")

SMALL_SIZE = 20
MEDIUM_SIZE = 24
BIGGER_SIZE = 26
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams['axes.facecolor'] = 'none'
plt.rcParams['axes.edgecolor'] = 'black'
plt.rc('font', size=MEDIUM_SIZE)
plt.rc('axes', titlesize=MEDIUM_SIZE)
plt.rc('axes', labelsize=MEDIUM_SIZE)
plt.rc('xtick', labelsize=MEDIUM_SIZE)
plt.rc('ytick', labelsize=MEDIUM_SIZE)
plt.rc('legend', fontsize=SMALL_SIZE)
plt.rc('figure', titlesize=BIGGER_SIZE)

model = pybamm.lithium_ion.DFN({
    "particle phases": ("2", "1"),
    "open-circuit potential": (("single", "current sigmoid"), "single"),
    "particle mechanics": ("swelling only", "none"),
    "loss of active material": ("stress-driven", "none"),
    "SEI": "solvent-diffusion limited",
    "SEI porosity change": "true",
    "particle": "Fickian diffusion",
    "cell geometry": "arbitrary",
})

parameter_values = pybamm.ParameterValues("Chen2020_composite")

experiment = pybamm.Experiment(
    [
            "Discharge at 1C until 2.5V",
            "Charge at 0.3C until 4.2V (3 minute period)",
            "Hold at 4.2V until C/100 (3 minute period)"
    ] * 1
)

solver= pybamm.IDAKLUSolver()
sim = pybamm.Simulation(
    model,
    experiment=experiment,
    parameter_values=parameter_values,
    solver=solver,
    discretisation_kwargs={"remove_independent_variables_from_rhs": True},
)
solution = sim.solve(calc_esoh=False)

# Plotting variables
t = solution["Time [s]"].entries
por_neg = solution["Negative electrode porosity"].entries
por_neg = por_neg.T  # Ensure shape is (space, time)

# Create normalized spatial axis
xn = np.linspace(0.0, 1, num=20)

# Meshgrid for plotting
X, Y = np.meshgrid(xn, t)

# First plot with annotations
plt.figure(figsize=(10, 6))
cp = plt.contourf(X, Y, por_neg, levels=50, cmap=cm.PuBu_r)
cbar = plt.colorbar(cp)
cbar.set_label("Porosity")
plt.title("Negative Electrode Porosity over Time and Position")
plt.xlabel("$x_n$")
plt.ylabel("Time [s]")
plt.annotate('Current collector', color='white', xy=(0.13, 0.35), xycoords='figure fraction',
             xytext=(0.25, 0.35), textcoords='figure fraction',
             arrowprops=dict(facecolor="white", width=1.5, headwidth=6),
             va='center', fontsize=20)
plt.annotate('Separator', color='white', xy=(0.74, 0.25), xycoords='figure fraction',
             xytext=(0.48, 0.25), textcoords='figure fraction',
             arrowprops=dict(facecolor="white", width=1.5, headwidth=6),
             va='center', fontsize=20)
plt.tight_layout()
plt.show()

'''# Second plot using LogLocator (may raise issues if values are not log-scaled)
fig, ax = plt.subplots(figsize=(10, 6))
cs = ax.contourf(X, Y, por_neg.T, locator=ticker.LogLocator(), cmap=cm.PuBu_r)
cbar = fig.colorbar(cs)
cbar.set_label("Porosity")
ax.set_xlabel("$x_n$")
ax.set_ylabel("Time [s]")
ax.set_title("Porosity (Log Color Scale)")
plt.tight_layout()
plt.show()'''
