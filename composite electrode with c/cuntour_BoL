import os
import matplotlib.pyplot as plt
import numpy as np
import pybamm
import pandas as pd
import timeit
from matplotlib import style, cm, ticker
import matplotlib.patches as mpatches
from matplotlib.pyplot import figure
from sympy.abc import alpha
from matplotlib.ticker import FormatStrFormatter



style.use('ggplot')
pybamm.set_logging_level("INFO")

SMALL_SIZE = 20
MEDIUM_SIZE = 24
BIGGER_SIZE = 26
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams['axes.facecolor'] = 'none'
plt.rcParams['axes.edgecolor'] = 'black'
plt.rc('font', size=MEDIUM_SIZE)
plt.rc('axes', titlesize=MEDIUM_SIZE)
plt.rc('axes', labelsize=MEDIUM_SIZE)
plt.rc('xtick', labelsize=MEDIUM_SIZE)
plt.rc('ytick', labelsize=MEDIUM_SIZE)
plt.rc('legend', fontsize=SMALL_SIZE)
plt.rc('figure', titlesize=BIGGER_SIZE)

model = pybamm.lithium_ion.DFN({
    "particle phases": ("2", "1"),
    "open-circuit potential": (("single", "current sigmoid"), "single"),
    "particle mechanics": ("swelling only", "none"),
    "loss of active material": ("stress-driven", "none"),
    "SEI": "solvent-diffusion limited",
    "SEI porosity change": "true",
    "particle": "Fickian diffusion",
    "cell geometry": "arbitrary",
    "lithium plating": "partially reversible",
    "lithium plating porosity change": "true",
})

parameter_values = pybamm.ParameterValues("Chen2020_composite")
parameter_values.update(
    {
    "Ambient temperature [K]": 273.15,
    "Lithium plating transfer coefficient": 0.5,
    "Dead lithium decay constant [s-1]": 1e-4
    }, check_already_exists=False,
)

experiment = pybamm.Experiment(
    [
            "Discharge at 1C until 2.5V",
            "Charge at 0.3C until 4.2V (3 minute period)",
            "Hold at 4.2V until C/100 (3 minute period)"
    ] * 2
)

solver= pybamm.IDAKLUSolver()
sim = pybamm.Simulation(
    model,
    experiment=experiment,
    parameter_values=parameter_values,
    solver=solver,
    discretisation_kwargs={"remove_independent_variables_from_rhs": True},
)
solution = sim.solve(calc_esoh=False)

# Plotting variables
t_full = solution["Time [min]"].entries
I_full = solution["Current [A]"].entries               # shape (nt,)


# compute approximate single-cycle length
cycle_length = t_full[-1] / 3

# start time of cycle 3
t3_start = 2 * cycle_length

# mask for indices in the 3rd cycle
mask3 = (t_full >= t3_start)
mask_dis = mask3 & (I_full > 0)   # discharge steps
mask_ch  = mask3 & (I_full < 0)   # charge steps

por_neg = solution["Negative electrode porosity"].entries
primary_stress = solution["Negative primary particle surface tangential stress [Pa]"].entries
secondary_stress = solution["Negative secondary particle surface tangential stress [Pa]"].entries

# Discharge
t_dis   = t_full[mask_dis] - t3_start
por_dis = por_neg[:, mask_dis].T
pri_dis = primary_stress[:, mask_dis].T
sec_dis = secondary_stress[:, mask_dis].T

# Charge
t_cha   = t_full[mask_ch] - t3_start
por_cha = por_neg[:, mask_ch].T
sec_cha = secondary_stress[:, mask_ch].T
pri_cha = primary_stress[:, mask_ch].T

# Create normalized spatial axis
xn = np.linspace(0, 1, num=20)

# Meshgrid for plotting
X_dis, Y_dis = np.meshgrid(xn, t_dis)
X_cha, Y_cha = np.meshgrid(xn, t_cha)

# contour for time/distance/porosity
# --- 4) Plot Discharge Porosity ------------------------------------------
'''fig, ax = plt.subplots(figsize=(10, 6))
cp = ax.contourf(X_dis, Y_dis, por_dis, levels=1000, cmap="plasma", alpha=1, antialiased=False,
    linewidths=0,edgecolors="none")
fig.colorbar(cp, label="Porosity")
ax.set_title("Neg. Electrode Porosity — Discharge")
ax.set_xlabel("$x_n$")
ax.set_ylabel("Time [min]")
plt.annotate(
    'Current collector',color='white',xy=(0.17, 0.8),xycoords='figure fraction',xytext=(0.25, 0.8),
    textcoords='figure fraction',arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.annotate(
    'Separator',color='white',xy=(0.74, 0.8),xycoords='figure fraction',xytext=(0.54, 0.8),
    textcoords='figure fraction', arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.tight_layout()

# --- 5) Plot Charge Porosity ---------------------------------------------
fig, ax = plt.subplots(figsize=(10, 6))
cp = ax.contourf(X_cha, Y_cha, por_cha, levels=1000, cmap="plasma", alpha=1, antialiased=False,
    linewidths=0,edgecolors="none")
fig.colorbar(cp, label="Porosity")
ax.set_title("Neg. Electrode Porosity — Charge")
ax.set_xlabel("$x_n$")
ax.set_ylabel("Time [min]")
plt.annotate(
    'Current collector',color='white',xy=(0.17, 0.8),xycoords='figure fraction',xytext=(0.25, 0.8),
    textcoords='figure fraction',arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.annotate(
    'Separator',color='white',xy=(0.74, 0.8),xycoords='figure fraction',xytext=(0.54, 0.8),
    textcoords='figure fraction', arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.tight_layout()

# --- 6) Similarly, stress on Discharge & Charge --------------------------
fig, ax = plt.subplots(figsize=(10, 6))
cs = ax.contourf(X_dis, Y_dis, sec_dis, levels=1000, cmap="plasma", alpha=1, antialiased=False,
    linewidths=0,edgecolors="none")
fig.colorbar(cs, label="Stress [Pa]")
ax.set_title("Si Particle Surface Stress — Discharge")
ax.set_xlabel("$x_n$")
ax.set_ylabel("Time [min]")
plt.annotate(
    'Current collector',color='white',xy=(0.17, 0.8),xycoords='figure fraction',xytext=(0.25, 0.8),
    textcoords='figure fraction',arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.annotate(
    'Separator',color='white',xy=(0.74, 0.8),xycoords='figure fraction',xytext=(0.54, 0.8),
    textcoords='figure fraction', arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.tight_layout()
#

fig, ax = plt.subplots(figsize=(10, 6))
cs = ax.contourf(X_cha, Y_cha, sec_cha, levels=1000, cmap="plasma", alpha=1 , antialiased=False,
    linewidths=0,edgecolors="none")
fig.colorbar(cs, label="Stress [Pa]")
ax.set_title("Si Particle Surface Stress — Charge")
ax.set_xlabel("$x_n$")
ax.set_ylabel("Time [min]")
plt.annotate(
    'Current collector',color='white',xy=(0.17, 0.8),xycoords='figure fraction',xytext=(0.25, 0.8),
    textcoords='figure fraction',arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.annotate(
    'Separator',color='white',xy=(0.74, 0.8),xycoords='figure fraction',xytext=(0.54, 0.8),
    textcoords='figure fraction', arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.tight_layout()
plt.show()'''

#Graphite particle stress
# --- 6) Similarly, stress on Discharge & Charge --------------------------

'''fig, ax = plt.subplots(figsize=(10, 6))
cs = ax.contourf(X_dis, Y_dis, pri_dis, levels=1000, cmap="plasma", alpha=1, antialiased=False,
    linewidths=0,edgecolors="none")
fig.colorbar(cs, label="Stress [Pa]")
ax.set_title("Gr Particle Surface Stress — Discharge")
ax.set_xlabel("$x_n$")
ax.set_ylabel("Time [min]")
plt.annotate(
    'Current collector',color='white',xy=(0.17, 0.8),xycoords='figure fraction',xytext=(0.25, 0.8),
    textcoords='figure fraction',arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.annotate(
    'Separator',color='white',xy=(0.74, 0.8),xycoords='figure fraction',xytext=(0.54, 0.8),
    textcoords='figure fraction', arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.tight_layout()
#

fig, ax = plt.subplots(figsize=(10, 6))
cs = ax.contourf(X_cha, Y_cha, pri_cha, levels=1000, cmap="plasma", alpha=1 , antialiased=False,
    linewidths=0,edgecolors="none")
cbar = fig.colorbar(cs, label="Stress [Pa]")
#cbar.ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))

ax.set_title("Gr Particle Surface Stress — Charge")
ax.set_xlabel("$x_n$")
ax.set_ylabel("Time [min]")
plt.annotate(
    'Current collector',color='white',xy=(0.17, 0.8),xycoords='figure fraction',xytext=(0.25, 0.8),
    textcoords='figure fraction',arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.annotate(
    'Separator',color='white',xy=(0.74, 0.8),xycoords='figure fraction',xytext=(0.54, 0.8),
    textcoords='figure fraction', arrowprops=dict(facecolor="white", width=3, headwidth=8),va='center',fontsize=20
)
plt.tight_layout()
plt.show()'''
