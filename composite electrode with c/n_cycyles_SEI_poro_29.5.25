import pybamm
import matplotlib.pyplot as plt
import numpy as np

pybamm.set_logging_level("INFO")

model = pybamm.lithium_ion.DFN({
    "particle phases": ("2", "1"),
    "open-circuit potential": (("single", "current sigmoid"), "single"),
    "particle mechanics": ("swelling only", "none"),
    "loss of active material": ("stress-driven", "none"),
    "particle": "Fickian diffusion",
    "cell geometry": "arbitrary",
    "SEI": "solvent-diffusion limited",
    "SEI porosity change": "true",
})

def graphite_volume_change_Ai2020(sto):
    p1 = 145.907
    p2 = -681.229
    p3 = 1334.442
    p4 = -1415.710
    p5 = 873.906
    p6 = -312.528
    p7 = 60.641
    p8 = -5.706
    p9 = 0.386
    p10 = -4.966e-05
    t_change = (
        p1 * sto**9
        + p2 * sto**8
        + p3 * sto**7
        + p4 * sto**6
        + p5 * sto**5
        + p6 * sto**4
        + p7 * sto**3
        + p8 * sto**2
        + p9 * sto
        + p10
    )
    return t_change

def lico2_volume_change_Ai2020(sto):
    omega = pybamm.Parameter("Positive electrode partial molar volume [m3.mol-1]")
    c_s_max = pybamm.Parameter("Maximum concentration in positive electrode [mol.m-3]")
    t_change = omega * c_s_max * sto
    return t_change

parameter_values = pybamm.ParameterValues("Chen2020_composite")
second = 0.1
parameter_values.update(
    {
        "Primary: Negative electrode reference concentration for free of deformation [mol.m-3]": 0.0,
        "Secondary: Negative electrode reference concentration for free of deformation [mol.m-3]": 0.0,
        "Primary: Negative electrode LAM constant proportional term [s-1]": 1e-4 / 3600,
        "Secondary: Negative electrode LAM constant proportional term [s-1]": 1e-4 / 3600 * second,
        "Positive electrode LAM constant proportional term [s-1]": 1e-4 / 3600,
        "Primary: Negative electrode partial molar volume [m3.mol-1]": 3.1e-06,
        "Primary: Negative electrode Young's modulus [Pa]": 1.5e10,
        "Primary: Negative electrode Poisson's ratio": 0.3,
        "Primary: Negative electrode critical stress [Pa]": 6e7,
        "Secondary: Negative electrode critical stress [Pa]": 6e7,
        "Primary: Negative electrode LAM constant exponential term": 2.0,
        "Secondary: Negative electrode LAM constant exponential term": 2.0,
        "Secondary: Negative electrode partial molar volume [m3.mol-1]": 3.1e-06 * second,
        "Secondary: Negative electrode Young's modulus [Pa]": 1.5e10 * second,
        "Secondary: Negative electrode Poisson's ratio": 0.3 * second,
        "Negative electrode reference concentration for free of deformation [mol.m-3]": 0.0,
        "Primary: Negative electrode volume change": graphite_volume_change_Ai2020,
        "Secondary: Negative electrode volume change": graphite_volume_change_Ai2020,
        "Positive electrode partial molar volume [m3.mol-1]": -7.28e-07,
        "Positive electrode Young's modulus [Pa]": 3.75e11,
        "Positive electrode Poisson's ratio": 0.2,
        "Positive electrode critical stress [Pa]": 3.75e8,
        "Positive electrode LAM constant exponential term": 2.0,
        "Positive electrode reference concentration for free of deformation [mol.m-3]": 0.0,
        "Positive electrode volume change": lico2_volume_change_Ai2020,
    },
    check_already_exists=False,
)

c_rates = [0.1, 0.5, 1.0]
results = {}

for c_rate in c_rates:
    experiment = pybamm.Experiment(
        [
            f"Discharge at {c_rate}C until 3 V",
            "Rest for 600 seconds",
            f"Charge at {c_rate}C until 4.2 V",
            "Hold at 4.199 V for 600 seconds",
        ] * 10
    )

    solver = pybamm.CasadiSolver()
    sim = pybamm.Simulation(
        model,
        experiment=experiment,
        parameter_values=parameter_values,
        solver=solver,
        discretisation_kwargs={"remove_independent_variables_from_rhs": True},
    )

    solution = sim.solve(calc_esoh=False)

    throughput_capacity = solution["Throughput capacity [A.h]"].entries
    x_avg_neg_porosity = solution["X-averaged negative electrode porosity"].entries

    results[c_rate] = (throughput_capacity, x_avg_neg_porosity)

# Plotting all three C-rates
plt.figure(figsize=(10, 6))
for c_rate in c_rates:
    throughput_capacity, x_avg_neg_porosity = results[c_rate]
    plt.plot(throughput_capacity, x_avg_neg_porosity, label=f"C-rate = {c_rate}")

# Set 5 ticks on each axis
plt.xticks(np.linspace(
    min(results[0.1][0]), max(results[1.0][0]), 5))
plt.yticks(np.linspace(
    min([min(r[1]) for r in results.values()]), max([max(r[1]) for r in results.values()]), 5))

plt.xlabel("Throughput Capacity [A.h]", fontsize=14)
plt.ylabel("X-averaged Negative Electrode Porosity", fontsize=14)
plt.title("X-averaged Negative Electrode Porosity vs Throughput Capacity for Different C-rates")
plt.legend()

plt.tight_layout()
plt.savefig("negative_electrode_porosity_vs_throughput_capacity_c_rates.png", dpi=1200)
plt.show()

