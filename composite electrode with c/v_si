import pybamm
import numpy as np
import matplotlib.pyplot as plt
import timeit



# Logging level
pybamm.set_logging_level("INFO")

# Start timer
start = timeit.default_timer()

# Build DFN model with composite particles
model = pybamm.lithium_ion.DFN({
    "particle phases": ("2", "1"),
    "open-circuit potential": (("single", "current sigmoid"), "single"),
})

# Load parameters and update
param = pybamm.ParameterValues("Chen2020_composite")
param.update({
    "Upper voltage cut-off [V]": 4.5,
    "Lower voltage cut-off [V]": 2.5,
    "Primary: Maximum concentration in negative electrode [mol.m-3]": 28700,
    "Primary: Initial concentration in negative electrode [mol.m-3]": 23000,
    "Primary: Negative particle diffusivity [m2.s-1]": 5.5e-14,
    "Secondary: Negative particle diffusivity [m2.s-1]": 1.67e-14,
    "Secondary: Initial concentration in negative electrode [mol.m-3]": 277000,
    "Secondary: Maximum concentration in negative electrode [mol.m-3]": 278000,
})

# Simulation parameters
volume_fractions = [0.001, 0.02, 0.1]
c_rates = [0.1, 0.5, 1.0]
total_am_volume_fraction = 0.75

# Define capacity
capacity = param["Nominal cell capacity [A.h]"]

# Configure CasADi solver
solver = pybamm.CasadiSolver(atol=1e-6, rtol=1e-6)
solver.dt_max = 1  # max 1 s step

# Store solutions
solutions = {}

for c_rate in c_rates:
    solutions[c_rate] = {}
    print(f"\n=== Running simulations for {c_rate}C ===")
    for v_si in volume_fractions:
        print(f"Simulating V_si = {v_si}")
        param.update({
            "Primary: Negative electrode active material volume fraction": (1 - v_si) * total_am_volume_fraction,
            "Secondary: Negative electrode active material volume fraction": v_si * total_am_volume_fraction,
            "Current function [A]": -c_rate * capacity,  # Negative for discharge
        })
        experiment = pybamm.Experiment([
            f"Discharge at {c_rate}C until {param['Lower voltage cut-off [V]']}V"
        ])
        sim = pybamm.Simulation(
            model,
            parameter_values=param,
            solver=solver,
            experiment=experiment
        )
        sol = sim.solve()
        solutions[c_rate][v_si] = sol

stop = timeit.default_timer()
print(f"\nTotal simulation time: {stop - start:.1f} seconds")

# Define plot markers, colors, and styles for consistent appearance
markers = ['o', 's', 'D']
colors = ['#1f77b4', '#ff7f0e', '#2ca02c']  # blue, orange, green
linestyles = ['-', '--', '-.']

# --- Plot 1: Voltage vs. Discharge Capacity ---
plt.figure(figsize=(8, 6))
for i, c_rate in enumerate(c_rates):
    for j, v_si in enumerate(volume_fractions):
        sol = solutions[c_rate][v_si]
        capacity_data = sol["Discharge capacity [A.h]"].entries
        voltage_data = sol["Voltage [V]"].entries
        plt.plot(
            capacity_data,
            voltage_data,
            marker=markers[j],
            color=colors[j],  # color by Si fraction
            linestyle=linestyles[i],  # linestyle by C-rate
            markevery=max(1, len(capacity_data)//10),
            label=f"{c_rate}C, $V_{{si}}={v_si}$"
        )
plt.xlabel("Discharge Capacity (Ah)", fontsize=14)
plt.ylabel("Voltage (V)", fontsize=14)

plt.ylim(2.5, 4.2)
plt.grid(False)
handles, labels = plt.gca().get_legend_handles_labels()
by_label = dict(zip(labels, handles))
plt.legend(by_label.values(), by_label.keys(), fontsize=10)
plt.tight_layout()
plt.savefig("voltage_vs_discharge_capacity.png", dpi=300)
plt.show()

# --- Plot 2: Capacity Retention vs. C-rate ---
plt.figure(figsize=(8, 6))
for j, v_si in enumerate(volume_fractions):
    capacities = []
    for c_rate in c_rates:
        final_capacity = solutions[c_rate][v_si]["Discharge capacity [A.h]"].entries[-1]
        capacities.append(final_capacity)
    plt.plot(
        c_rates,
        capacities,
        marker=markers[j],
        color=colors[j],  # use distinct color for each Si fraction
        linestyle=linestyles[j],
        label=f"$V_{{si}}={v_si}$"
    )
plt.xlabel("C-rate", fontsize=14)
plt.ylabel("Capacity Retention (Ah)", fontsize=14)

plt.xticks(c_rates)
plt.grid(False)
plt.legend(loc='upper right', fontsize=10)
plt.tight_layout()
plt.savefig("capacity_retention_vs_crate.png", dpi=300)
plt.show()
