import os
import matplotlib.pyplot as plt
import pybamm
import timeit
from matplotlib import style


# Logging level
pybamm.set_logging_level("INFO")

# Start timer
start = timeit.default_timer()

# Build DFN model
model = pybamm.lithium_ion.DFN({
    "particle phases": ("2", "1"),
    "open-circuit potential": (("single", "current sigmoid"), "single"),
})

# Load parameters and update
param = pybamm.ParameterValues("Chen2020_composite")
param.update({
    "Upper voltage cut-off [V]": 4.5,
    "Lower voltage cut-off [V]": 2.5,
    "Primary: Maximum concentration in negative electrode [mol.m-3]": 28700,
    "Primary: Initial concentration in negative electrode [mol.m-3]": 23000,
    "Primary: Negative particle diffusivity [m2.s-1]": 5.5e-14,
    "Secondary: Negative particle diffusivity [m2.s-1]": 1.67e-14,
    "Secondary: Initial concentration in negative electrode [mol.m-3]": 277000,
    "Secondary: Maximum concentration in negative electrode [mol.m-3]": 278000,
})

# Define C-rate and current function
C_rate = 0.5
capacity = param["Nominal cell capacity [A.h]"]
I_load = C_rate * capacity
param.update({"Current function [A]": I_load})

# Time vector
t_eval = [0, 10000]  # seconds

# Volume fractions to sweep
v_si = [0.001, 0.02, 0.1]
total_am_volume_fraction = 0.75

# Configure CasADi solver
solver = pybamm.CasadiSolver(atol=1e-6, rtol=1e-6)
solver.dt_max = 1  # max 1 s step

solutions = []

# Run the simulations
for v in v_si:
    print(f"Simulating for V_si = {v}")
    param.update({
        "Primary: Negative electrode active material volume fraction": (1 - v) * total_am_volume_fraction,
        "Secondary: Negative electrode active material volume fraction": v * total_am_volume_fraction,
    })
    sim = pybamm.Simulation(model, parameter_values=param, solver=solver)
    sol = sim.solve(t_eval=t_eval)
    solutions.append(sol)

# Stop timer
stop = timeit.default_timer()
print(f"Done in {stop - start:.1f} s")

# Plot Voltage vs. Charge Throughput
plt.figure(figsize=(8, 5))
linestyles = ["k-", "r--", "b-."]
for i, sol in enumerate(solutions):
    time_s = sol["Time [s]"].entries
    # Q = I_load * t (A * s) â†’ divide by 3600 to get Ah
    Q_Ah = I_load * time_s / 3600
    V = sol["Voltage [V]"].entries
    plt.plot(Q_Ah, V, linestyles[i], label=fr"$V_{{\mathrm{{si}}}}={v_si[i]}$")

plt.xlabel("Charge throughput (Ah)", fontsize=14)
plt.ylabel("Voltage (V)", fontsize=14)
plt.legend()
plt.tight_layout()
plt.savefig("Voltage vs Charge Throughput.png", dpi=300)
plt.show()
