import os
import matplotlib.pyplot as plt
import numpy as np
import pybamm
from matplotlib import style

# ─── Styling ─────────────────────────
style.use('ggplot')
pybamm.set_logging_level("INFO")

SMALL_SIZE, MEDIUM_SIZE, BIGGER_SIZE = 20, 24, 26
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams['axes.facecolor'] = 'none'
plt.rcParams['axes.edgecolor'] = 'black'
plt.rc('font', size=MEDIUM_SIZE)
plt.rc('axes', titlesize=MEDIUM_SIZE)
plt.rc('axes', labelsize=MEDIUM_SIZE)
plt.rc('xtick', labelsize=MEDIUM_SIZE)
plt.rc('ytick', labelsize=MEDIUM_SIZE)
plt.rc('legend', fontsize=SMALL_SIZE)
plt.rc('figure', titlesize=BIGGER_SIZE)

out_dir = r"E:\MTP project\Results\porousAnodeResult\16.7.25\BOL-C-rates"
os.makedirs(out_dir, exist_ok=True)

# ─── Build model & base parameters ───────────────
model = pybamm.lithium_ion.DFN({
    "particle phases": ("2", "1"),
    "open-circuit potential": (("single", "current sigmoid"), "single"),
    "particle mechanics": ("swelling only", "none"),
    "loss of active material": ("stress-driven", "none"),
    "SEI": "solvent-diffusion limited",
    "SEI porosity change": "true",
    "particle": "Fickian diffusion",
    "cell geometry": "arbitrary",
    "lithium plating": "partially reversible",
    "lithium plating porosity change": "true",
})
parameter_values = pybamm.ParameterValues("Chen2020_composite")

# ─── C‑rates to loop over ─────────────────────────
c_rates = [0.5, 1.0, 2.0]
tp_list, dis_cap = [], []
si_pct_list = []
gr_pct_list = []
Vsi_pct_list = []
Vgr_pct_list = []
disp_Si_list = []
disp_Gr_list = []
cc_Si, s_Si, cc_Gr, s_Gr, X_Por, cc_Por, s_Por = [], [], [], [], [], [], []

# ─── Loop: run sim for each C‑rate ────────────────
for c_rate in c_rates:
    parameter_values.update({
        "Lithium plating transfer coefficient": 0.5,
        "Dead lithium decay constant [s-1]": 1e-4,
        "Primary: Maximum concentration in negative electrode [mol.m-3]": 28700,
        "Primary: Initial concentration in negative electrode [mol.m-3]": 23000,
        "Secondary: Initial concentration in negative electrode [mol.m-3]": 277000,
        "Secondary: Maximum concentration in negative electrode [mol.m-3]": 278000,
        # final updated parameter for BoL&EoL
        "Positive electrode LAM constant proportional term [s-1]": 1.7778e-07,
        "Primary: Negative electrode LAM constant proportional term [s-1]": 5.8778e-06,
        "Secondary: Negative electrode LAM constant proportional term [s-1]": 2.8778e-07,
        "Primary: Outer SEI solvent diffusivity [m2.s-1]": 2.5e-24,
        "Secondary: Outer SEI solvent diffusivity [m2.s-1]": 9.5e-22,
        "Secondary: Negative electrode partial molar volume [m3.mol-1]": 1.20e-05,
        "Positive electrode partial molar volume [m3.mol-1]": 1.2e-06,
    }, check_already_exists=False)

    experiment = pybamm.Experiment([
                                       (f"Discharge at {c_rate}C until 2.5V",
                                        "Charge at 0.3C until 4.2V (3 minute period)",
                                        "Hold at 4.2V until C/100 (3 minute period)"
                                        )
                                   ] * 2)

    sim = pybamm.Simulation(
        model,
        experiment=experiment,
        parameter_values=parameter_values,
        solver=pybamm.IDAKLUSolver(),
        discretisation_kwargs={"remove_independent_variables_from_rhs": True},
    )
    sol = sim.solve(calc_esoh=False)
    cyc_2 = sol.cycles[1]
    t = cyc_2["Time [s]"].entries
    throughput = cyc_2["Throughput capacity [A.h]"].entries
    dis_cap.append(cyc_2["Discharge capacity [A.h]"].entries)
    Rs = parameter_values["Secondary: Negative particle radius [m]"]
    Rp = parameter_values["Primary: Negative particle radius [m]"]
    disp_Si = cyc_2["X-averaged negative secondary particle surface displacement [m]"].entries + Rs
    disp_Gr = cyc_2["X-averaged negative primary particle surface displacement [m]"].entries + Rp
    cc_Si.append(cyc_2["Negative secondary particle surface displacement [m]"].entries[0, :] + Rs)
    s_Si.append(cyc_2["Negative secondary particle surface displacement [m]"].entries[-1, :] + Rs)
    cc_Gr.append(cyc_2["Negative primary particle surface displacement [m]"].entries[0, :] + Rp)
    s_Gr.append(cyc_2["Negative primary particle surface displacement [m]"].entries[-1, :] + Rp)
    X_Por.append(cyc_2["X-averaged negative electrode porosity"].entries)
    cc_Por.append(cyc_2["Negative electrode porosity"].entries[0, :])
    s_Por.append(cyc_2["Negative electrode porosity"].entries[-1, :])

    # si_min = Rs.min()
    # gr_min = Rp.min()
    si_pct = disp_Si
    gr_pct = disp_Gr
    Vsi_pct = 3 * (disp_Si - Rs) / Rs * 100
    Vgr_pct = 3 * (disp_Gr - Rp) / Rp * 100

    tp_list.append(throughput)
    si_pct_list.append(si_pct)
    gr_pct_list.append(gr_pct)
    Vsi_pct_list.append(Vsi_pct)
    Vgr_pct_list.append(Vgr_pct)
    disp_Gr_list.append(disp_Gr)
    disp_Si_list.append(disp_Si)

# ─── Helper: shading + arrows ───────────────────────


# ─── Combined Silicon plot ────────────────────────
fig, ax = plt.subplots(figsize=(8,6))
ax.plot(tp_list[0], Vsi_pct_list[0],"-" ,lw=3, label="0.5C", color="midnightblue")
ax.plot(tp_list[1], Vsi_pct_list[1], "--", lw=3, label="1C", color="royalblue")
ax.plot(tp_list[2], Vsi_pct_list[2], ":", lw=3, label="2C", color="cornflowerblue")   # correct label here
y_max = 3*108
mid   = 4.9 # you had hardcoded 5.6; better to use mid = per_cycle/2
y0    = y_max + 3
# shading
ax.fill_betweenx([-0.1, y_max], 0,    mid,       color="linen",   alpha=1)
ax.fill_betweenx([-0.1, y_max], mid,  10, color="lavender",alpha=1)
# discharge arrow
ax.annotate("", xy=(0, y0),   xytext=(mid, y0),
            arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
            annotation_clip=False)
ax.text(mid/2, y0 + y_max*0.01, "Discharge",
        ha="center", va="bottom", fontsize=MEDIUM_SIZE)
# charge arrow
ax.annotate("", xy=(mid, y0), xytext=(10, y0),
            arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
            annotation_clip=False)
ax.text(mid + (10-mid)/2, y0 + y_max*0.01, "Charge 0.3C",
        ha="center", va="bottom", fontsize=MEDIUM_SIZE)
# axis formatting
ax.spines["bottom"].set_position(("data", 0))
ax.xaxis.set_ticks_position("bottom")
ax.set_xlabel("Throughput Capacity [A·h]")
ax.set_ylabel("Volume change [%]")
#ax.set_xlim(-0.05*per_cycle, 1.1*per_cycle)
ax.set_ylim(0, 124*3)
# legend (no empty string!)
leg = ax.legend(loc="lower left", frameon=False, fontsize=SMALL_SIZE)
for text in leg.get_texts():
    text.set_color("black")
plt.tight_layout()
fname = "Avg Si Vol with C-rate"
fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
plt.show()

# ---------------------Radius change for silicon in different c-rates  ---------------

fig, ax = plt.subplots(figsize=(7.5, 6))
ax.plot(tp_list[0], si_pct_list[0], "-", lw=3, label="0.5C", color="midnightblue")
ax.plot(tp_list[1], si_pct_list[1], "--", lw=3, label="1C", color="royalblue")
ax.plot(tp_list[2], si_pct_list[2], ":", lw=3, label="2C", color="cornflowerblue")  # correct label here

y_max = 3.2e-6
mid = 4.8  # you had hardcoded 5.6; better to use mid = per_cycle/2
y0 = y_max

# shading
ax.fill_betweenx([-0.1, y_max], 0, mid, color="linen", alpha=1)
ax.fill_betweenx([-0.1, y_max], mid, 10, color="lavender", alpha=1)
# discharge arrow
ax.annotate("", xy=(0, y0), xytext=(mid, y0),
            arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
            annotation_clip=False)
ax.text(mid / 2, 3.22e-6, "Discharge",
        ha="center", va="bottom", fontsize=MEDIUM_SIZE)

# charge arrow
ax.annotate("", xy=(mid, y0), xytext=(10, y0),
            arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
            annotation_clip=False)
ax.text(mid + (10 - mid) / 2, 3.22e-6 , "Charge",
        ha="center", va="bottom", fontsize=MEDIUM_SIZE)

# axis formatting
ax.spines["bottom"].set_position(("data", 1.5e-6))
ax.xaxis.set_ticks_position("bottom")
ax.set_xlabel("Throughput Capacity [A·h]")
ax.set_ylabel("Radius [m]")
# ax.set_xlim(-0.05*per_cycle, 1.1*per_cycle)
ax.set_ylim(1.5e-6, 2e-6 + Rs)

# legend (no empty string!)
leg = ax.legend(loc="lower left", frameon=False, fontsize=SMALL_SIZE)
for text in leg.get_texts():
    text.set_color("black")

plt.tight_layout()
fname = "Avg Si Radi with C-rate"
fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
plt.show()

# --------------------------Radius of Silicon in seperator/Average/current collector side----------------
c_rates = [0.5, 1, 2]
for i in range(3):  # for indices 0, 1, 2
    fig, ax = plt.subplots(figsize=(7.5, 6))

    # Plot Si surface displacement curves
    ax.plot(tp_list[i], disp_Si_list[i], "-", lw=3, label="Avg", color="midnightblue")
    ax.plot(tp_list[i], s_Si[i], "--", lw=3, label="Sep", color="royalblue")
    ax.plot(tp_list[i], cc_Si[i], ":", lw=3, label="CC", color="cornflowerblue")

    # Y-axis scaling parameters
    y_max = 3.2e-6
    mid = 4.8  # midpoint for discharge/charge split
    y0 = y_max
    x_length = np.max(tp_list[i])

    # Shaded regions for discharge and charge
    ax.fill_betweenx([-0.1, y_max], 0, mid, color="linen", alpha=1)
    ax.fill_betweenx([-0.1, y_max], mid, x_length, color="lavender", alpha=1)

    # Discharge arrow
    ax.annotate("", xy=(0, y0), xytext=(mid, y0),
                arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
                annotation_clip=False)
    ax.text(mid / 2, 3.22e-6, f"Discharge {c_rates[i]}C",
            ha="center", va="bottom", fontsize=MEDIUM_SIZE)

    # Charge arrow
    ax.annotate("", xy=(mid, y0), xytext=(x_length, y0),
                arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
                annotation_clip=False)
    ax.text(mid + (10 - mid) / 2, 3.22e-6, "Charge 0.3C",
            ha="center", va="bottom", fontsize=MEDIUM_SIZE)

    # Axis formatting
    ax.spines["bottom"].set_position(("data", 1.5e-6))
    ax.xaxis.set_ticks_position("bottom")
    ax.set_xlabel("Throughput Capacity [A·h]")
    ax.set_ylabel("Radius [m]")
    ax.set_xticks([0, 2.5, 5, 7.5, 10])
    ax.set_ylim(1.5e-6, 2e-6 + Rs)  # Ensure Rs is defined earlier

    # Legend formatting
    leg = ax.legend(loc="lower left", frameon=False, fontsize=SMALL_SIZE)
    for text in leg.get_texts():
        text.set_color("black")

    plt.tight_layout()
    fname = f"Spatial Si Vol with {c_rates[i]}C"
    fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
    plt.show()

# ==============================================$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$=========================================#
# ─── Combined Graphite plot ────────────

fig, ax = plt.subplots(figsize=(7.5, 6))

# Plot graphite curves with updated linewidths and labels
ax.plot(tp_list[0], Vgr_pct_list[0], lw=3, linestyle="-", color="navy", label="0.5C")
ax.plot(tp_list[1], Vgr_pct_list[1], lw=3, linestyle="--", color="teal", label="1C")
ax.plot(tp_list[2], Vgr_pct_list[2], lw=3, linestyle=":", color="darkgreen", label="2C")

# Parameters
mid = 4.9
per_cycle = 10
y_max = 8
y0 = y_max + 0.1  # placement of arrows

# Fill regions
ax.fill_betweenx([0, y_max], 0, mid, color="linen", alpha=1)
ax.fill_betweenx([0, y_max], mid, per_cycle, color="lavender", alpha=1)

# Annotations for Discharge
ax.annotate("", xy=(0, y0), xytext=(mid, y0),
            arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
            annotation_clip=False)
ax.text(mid/2, y0 + 0.03, "Discharge", ha="center", va="bottom", fontsize=MEDIUM_SIZE)

# Annotations for Charge
ax.annotate("", xy=(mid, y0), xytext=(per_cycle, y0),
            arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
            annotation_clip=False)
ax.text(mid + (per_cycle - mid)/2, y0 + 0.03, "0.3C Charge", ha="center", va="bottom", fontsize=MEDIUM_SIZE)

# Axis labels and limits
ax.spines["bottom"].set_position(("data", 0))
ax.xaxis.set_ticks_position("bottom")
ax.set_xlabel("Throughput Capacity [A.h]")
ax.set_ylabel("Volume change [%]")
ax.set_xlim(-0.05 * per_cycle, 1.055 * per_cycle)
ax.set_ylim(0, 3*3)

# Legend
leg = ax.legend(loc="lower left", frameon=False, fontsize=SMALL_SIZE)
for text in leg.get_texts():
    text.set_color("black")

plt.tight_layout()
fname = "Avg Gr Vol with C-rate"
fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
plt.show()

# ------------------------- Graphite particle absolute Radius------------

fig, ax = plt.subplots(figsize=(7.5, 6))

# Plot graphite curves with updated linewidths and labels
ax.plot(tp_list[0], gr_pct_list[0], lw=3, linestyle="-", color="navy", label="0.5C")
ax.plot(tp_list[1], gr_pct_list[1], lw=3, linestyle="--", color="teal", label="1C")
ax.plot(tp_list[2], gr_pct_list[2], lw=3, linestyle=":", color="darkgreen", label="2C")

# Parameters
mid = 4.8
per_cycle = 9.9
y_max = 6.025e-6
y0 = y_max + 0.0007e-6  # placement of arrows

# Fill regions
ax.fill_betweenx([0, y_max], 0, mid, color="linen", alpha=1)
ax.fill_betweenx([0, y_max], mid, per_cycle, color="lavender", alpha=1)

# Annotations for Discharge
ax.annotate("", xy=(0, y0), xytext=(mid, y0),
            arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
            annotation_clip=False)
ax.text(mid/2, y0 + 0.001e-6, "Discharge", ha="center", va="bottom", fontsize=MEDIUM_SIZE)

# Annotations for Charge
ax.annotate("", xy=(mid, y0), xytext=(per_cycle, y0),
            arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
            annotation_clip=False)
ax.text(mid + (per_cycle - mid)/2, y0 + 0.001e-6, "0.3C Charge", ha="center", va="bottom", fontsize=MEDIUM_SIZE)

# Axis labels and limits
ax.spines["bottom"].set_position(("data", 5.85e-6))
ax.xaxis.set_ticks_position("bottom")
ax.set_xlabel("Throughput Capacity [A.h]")
ax.set_ylabel("Radius [m]")
ax.set_xlim(-0.05 * 10, 1.055 * 10)
ax.set_ylim(5.85e-6, 6.05e-6)

# Legend
first_legend = ax.legend(loc="lower left", frameon=False, fontsize=SMALL_SIZE)
ax.add_artist(first_legend)  # Add the first legend as an artist

plt.tight_layout()
fname = "Avg Gr radii with C-rate"
fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
plt.show()

# --------------------Spatial side Graphite particle---------------

c_rates = [0.5, 1, 2]
for i in range(3):  # for indices 0, 1, 2
    fig, ax = plt.subplots(figsize=(8, 6))

    # Plot Si surface displacement curves
    ax.plot(tp_list[i], disp_Gr_list[i], "-", lw=3, label="Avg", color="navy")
    ax.plot(tp_list[i], s_Gr[i], "--", lw=3, label="Sep", color="teal")
    ax.plot(tp_list[i], cc_Gr[i], ":", lw=3, label="CC", color="darkgreen")

    # Parameters
    mid = 4.8
    per_cycle = np.max(tp_list[i])
    y_max = 6.03e-6
    y0 = y_max + 0.0007e-6  # placement of arrows

    # Fill regions
    ax.fill_betweenx([0, y_max], 0, mid, color="linen", alpha=1)
    ax.fill_betweenx([0, y_max], mid, per_cycle, color="lavender", alpha=1)

    # Annotations for Discharge
    ax.annotate("", xy=(0, y0), xytext=(mid, y0),
                arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
                annotation_clip=False)
    ax.text(mid / 2, y0 + 0.001e-6, f"{c_rates[i]}C Discharge", ha="center", va="bottom", fontsize=MEDIUM_SIZE)

    # Annotations for Charge
    ax.annotate("", xy=(mid, y0), xytext=(per_cycle, y0),
                arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"),
                annotation_clip=False)
    ax.text(mid + (per_cycle - mid) / 2, y0 + 0.001e-6, "0.3C Charge", ha="center", va="bottom", fontsize=MEDIUM_SIZE)

    # Axis labels and limits
    ax.spines["bottom"].set_position(("data", 5.85e-6))
    ax.xaxis.set_ticks_position("bottom")
    ax.set_xlabel("Throughput Capacity [A.h]")
    ax.set_ylabel("Radius [m]")
    ax.set_xticks([0, 2.5, 5, 7.5, 10])
    ax.set_ylim(5.85e-6, 6.05e-6)

    # Legend
    first_legend = ax.legend(loc="lower right", frameon=False, fontsize=SMALL_SIZE)
    ax.add_artist(first_legend)  # Add the first legend as an artist

    plt.tight_layout()
    fname = f"Spatial Gr Radii with {c_rates[i]}C"
    fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
    plt.show()

# ==============================$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$======================================
# ===================Porosity=================Porosity===================Porosity===============Porosity============

# -----------------------------X-averaged Porosity in different Si%-------------------------
per_cycle = 9.9
mid=4.8

fig, ax = plt.subplots(figsize=(8, 6))
ax.plot(tp_list[0],X_Por[0],linestyle="-", lw=3, label="0.5C", color="midnightblue")
ax.plot(tp_list[1],X_Por[1],linestyle="--", lw=3, label="1C", color="royalblue")
ax.plot(tp_list[2],X_Por[2],linestyle=":", lw=3, label="2C", color="cornflowerblue")

ax.fill_betweenx([0, 0.25], 0, mid, color="linen", alpha=1)
ax.fill_betweenx([0, 0.25], mid, per_cycle, color="lavender", alpha=1)
ax.set_ylim(0.2478, 0.2503)
ax.set_xlim(-0.05 * per_cycle, 1.05 * per_cycle)
ax.set_xlabel("Throughput Capacity [A·h]")
ax.set_ylabel("Porosity")
ax.spines["bottom"].set_position(("data", 0.2478))
ax.xaxis.set_ticks_position("bottom")
y0 = 0.250025
ax.annotate("", xy=(0, y0), xytext=(mid, y0), arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"))
ax.annotate("", xy=(mid, y0), xytext=(per_cycle, y0), arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"))
ax.text(mid/2, 0.2501, "Discharge", ha="center", fontsize=MEDIUM_SIZE)
ax.text(mid + (per_cycle - mid)/2, 0.2501, "0.3C Charge", ha="center", fontsize=MEDIUM_SIZE)

first_legend = ax.legend(loc="lower left", frameon=False, fontsize=SMALL_SIZE)
ax.add_artist(first_legend)  # Add the first legend as an artist
plt.tight_layout()
fname = "Por_X_avg"
fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)

plt.show()

# -------------------X-averaged \ current collector \ seperator side porosity evolution ----------------------#


c_rates = [0.5, 1, 2]
for i in range(3):  # for indices 0, 1, 2
    fig, ax = plt.subplots(figsize=(8, 6))
    mid = 4.8
    per_cycle = np.max(tp_list[i])

    # Plot Si surface displacement curves
    ax.plot(tp_list[i], X_Por[i], "-", lw=3, label="Avg", color="midnightblue")
    ax.plot(tp_list[i], s_Por[i], "--", lw=3, label="Sep", color="royalblue")
    ax.plot(tp_list[i], cc_Por[i], ":", lw=3, label="CC", color="cornflowerblue")

    ax.fill_betweenx([0, 0.25], 0, mid, color="linen", alpha=1)
    ax.fill_betweenx([0, 0.25], mid, per_cycle, color="lavender", alpha=1)
    ax.set_ylim(0.2478, 0.2503)
    ax.set_xlim(-0.05 * per_cycle, 1.05 * per_cycle)
    ax.set_xlabel("Throughput Capacity [A·h]")
    ax.set_ylabel("Porosity")
    ax.spines["bottom"].set_position(("data", 0.2478))
    ax.xaxis.set_ticks_position("bottom")
    y0 = 0.25005
    ax.annotate("", xy=(0, y0), xytext=(mid, y0), arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"))
    ax.annotate("", xy=(mid, y0), xytext=(per_cycle, y0), arrowprops=dict(arrowstyle="<|-|>", linewidth=2, color="black"))
    ax.text(mid/2, 0.2501, f"{c_rates[i]}C Discharge", ha="center", fontsize=MEDIUM_SIZE)
    ax.text(mid + (per_cycle - mid)/2, 0.2501, "0.3C Charge", ha="center", fontsize=MEDIUM_SIZE)

    first_legend = ax.legend(loc="lower left", frameon=False, fontsize=SMALL_SIZE)
    ax.add_artist(first_legend)  # Add the first legend as an artist

    plt.tight_layout()
    fname = f"Por_saptial_{c_rates[i]}C"
    fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
    plt.close(fig)

