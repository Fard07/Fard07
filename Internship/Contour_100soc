import os
import matplotlib.pyplot as plt
import numpy as np
import pybamm
import pandas as pd
import timeit
from matplotlib import style, cm, ticker
import matplotlib.patches as mpatches
from matplotlib.pyplot import figure
from sympy.abc import alpha
from matplotlib.ticker import FormatStrFormatter
from scipy.interpolate import interp1d
from matplotlib.lines import Line2D

# ─── Styling ─────────────────────────
style.use('ggplot')
pybamm.set_logging_level("INFO")

SMALL_SIZE = 20
MEDIUM_SIZE = 24
BIGGER_SIZE = 26
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams['axes.facecolor'] = 'none'
plt.rcParams['axes.edgecolor'] = 'black'
plt.rc('font', size=MEDIUM_SIZE)
plt.rc('axes', titlesize=MEDIUM_SIZE)
plt.rc('axes', labelsize=MEDIUM_SIZE)
plt.rc('xtick', labelsize=MEDIUM_SIZE)
plt.rc('ytick', labelsize=MEDIUM_SIZE)
plt.rc('legend', fontsize=SMALL_SIZE)
plt.rc('figure', titlesize=BIGGER_SIZE)

# ======================%%%  File path   %%%========================
out_dir = r"E:\MTP project\Results\porousAnodeResult\16.7.25\contour"
os.makedirs(out_dir, exist_ok=True)

# ─── Build model & parameters ─────────────────��───────
model = pybamm.lithium_ion.DFN({
    "particle phases": ("2", "1"),
    "open-circuit potential": (("single", "current sigmoid"), "single"),
    "particle mechanics": ("swelling only", "none"),
    "loss of active material": ("stress-driven", "none"),
    "SEI": "solvent-diffusion limited",
    "SEI porosity change": "true",
    "particle": "Fickian diffusion",
    "cell geometry": "arbitrary",
    "lithium plating": "partially reversible",
    "lithium plating porosity change": "true",
})
parameter_values = pybamm.ParameterValues("Chen2020_composite")

parameter_values.update({
    "Lithium plating transfer coefficient": 0.5,
    "Dead lithium decay constant [s-1]": 1e-4,
    "Primary: Maximum concentration in negative electrode [mol.m-3]": 28700,
    "Primary: Initial concentration in negative electrode [mol.m-3]": 23000,
    "Secondary: Initial concentration in negative electrode [mol.m-3]": 277000,
    "Secondary: Maximum concentration in negative electrode [mol.m-3]": 278000,
    # final updated parameter for BoL&EoL
    "Positive electrode LAM constant proportional term [s-1]": 1.7778e-07,
    "Primary: Negative electrode LAM constant proportional term [s-1]": 5.8778e-06,
    "Secondary: Negative electrode LAM constant proportional term [s-1]": 2.8778e-07,
    "Primary: Outer SEI solvent diffusivity [m2.s-1]": 2.5e-24,
    "Secondary: Outer SEI solvent diffusivity [m2.s-1]": 9.5e-22,
    "Secondary: Negative electrode partial molar volume [m3.mol-1]": 1.20e-05,
    "Positive electrode partial molar volume [m3.mol-1]": 1.2e-06,

}, check_already_exists=False)

# ─── C‐rates to sweep ─────────────────────────
c_rates = [0.5, 1, 2]

# Containers to collect results
all_X, all_Y, all_por = [], [], []

for C in c_rates:
    # ─── Experiment for this C-rate ─────────────────────────
    exp = pybamm.Experiment([
                                (f"Discharge at {C}C until 2.5V",
                                 "Charge at 0.3C until 4.2V (3 minute period)",
                                 "Hold at 4.2V until C/100 (3 minute period)",
                                 ),
                            ] * 2)

    sim = pybamm.Simulation(
        model,
        experiment=exp,
        parameter_values=parameter_values,
        solver=pybamm.IDAKLUSolver(),
        discretisation_kwargs={"remove_independent_variables_from_rhs": True},
    )
    sol = sim.solve(calc_esoh=False)

    D_cap = sol["Discharge capacity [A.h]"].entries
    cycle2 = sol.cycles[1]

    # ─── Extract raw data ─────────────────────────
    t_full = cycle2["Time [h]"].entries
    I_full = cycle2["Current [A]"].entries
    Dc_full = cycle2["Discharge capacity [A.h]"].entries
    por_full = cycle2["Negative electrode porosity"].data
    N_cap = parameter_values["Nominal cell capacity [A.h]"]
    Dc_full_max = np.max(Dc_full)

    soc = ((1 - Dc_full / Dc_full_max) * 100)
    # soc_2 = np.where(I_full > 0, soc, -soc)
    soc_d = soc[I_full > 0]
    soc_c = soc[I_full < 0]

    # ─── Separate Charge and Discharge Data ─────────────────────────
    # Discharge data (current > 0)
    t_discharge = t_full[I_full > 0]
    I_discharge = I_full[I_full > 0]
    Dc_discharge = Dc_full[I_full > 0]
    por_discharge = por_full[:, I_full > 0]
    # soc_discharge = soc_d[I_full > 0]

    # Charge data (current < 0) - Note that the hold phase also has current close to 0
    # You might need to refine the condition for "charge" if the hold phase needs to be explicitly excluded
    t_charge = t_full[I_full < 0]
    I_charge = I_full[I_full < 0]
    Dc_charge = Dc_full[I_full < 0]
    por_charge = por_full[:, I_full < 0]
    # soc_charge = soc_2[I_full < 0]

    # ─── Meshgrids ─────────────────────────
    # You can create separate meshgrids for discharge and charge if needed
    xn = np.linspace(0, 1, num=20)
    Xd_discharge, Yd_discharge = np.meshgrid(xn, soc_d)
    Xd_charge, Yd_charge = np.meshgrid(xn, soc_c)
    all_X.append((C, Xd_discharge, Yd_discharge, por_discharge))
    all_Y.append((C, Xd_charge, Yd_charge, por_charge))

#####################------------------ Plotting discharge data------------------##########################
# Plotting discharge data

'''for C, Xd_discharge, Yd_discharge, por_discharge in all_X:
    fig, ax = plt.subplots(figsize=(10, 6))
    cp = ax.contourf(
        Xd_discharge, Yd_discharge, por_discharge.T,
        levels=1000, cmap="plasma_r", antialiased=False,
        linewidths=0, edgecolors="none"
    )
    cbar = fig.colorbar(cp, label="Porosity")
    # Get colorbar axis limits
    cbar_ylim = cbar.ax.get_ylim()
    num_ticks = 8  # adjust as desired
    new_ticks = np.linspace(cbar_ylim[0], cbar_ylim[1], num=num_ticks)
    cbar.ax.set_yticks(new_ticks)
    # Set tick labels descending from high (bottom) to low (top)
    cbar.ax.set_yticklabels([f"{t:.5f}" for t in np.linspace(cp.norm.vmax, cp.norm.vmin, num=num_ticks)])
    cbar.ax.invert_yaxis()
    cbar.ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.5f'))

    ax.set_title(f"{C}C Discharge")
    ax.set_xlabel("$x_n$")
    ax.set_ylabel("SoC [%]")

    # ax.set_yticks([0, 20, 40, 60, 80, 100])
    plt.annotate(
        'Current collector', color='white',
        xy=(0.14, 0.25), xycoords='figure fraction',
        xytext=(0.22, 0.25), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    plt.annotate(
        'Separator', color='white',
        xy=(0.74, 0.25), xycoords='figure fraction',
        xytext=(0.53, 0.25), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    plt.tight_layout()
    fname = f"discharge_{C}C"
    fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
    plt.close(fig)
    plt.show()

#########################################--------- Plotting charge data ---------#############################

for C, Xd_charge, Yd_charge, por_charge in all_Y:
    fig, ax = plt.subplots(figsize=(10, 6))
    cp = ax.contourf(
        Xd_charge, Yd_charge, por_charge.T,
        levels=1000, cmap="plasma_r", antialiased=False,
        linewidths=0, edgecolors="none"
    )
    cbar = fig.colorbar(cp, label="Porosity")
    # Get colorbar axis limits
    cbar_ylim = cbar.ax.get_ylim()
    num_ticks = 8  # adjust as desired
    new_ticks = np.linspace(cbar_ylim[0], cbar_ylim[1], num=num_ticks)
    cbar.ax.set_yticks(new_ticks)
    # Set tick labels descending from high (bottom) to low (top)
    cbar.ax.set_yticklabels([f"{t:.5f}" for t in np.linspace(cp.norm.vmax, cp.norm.vmin, num=num_ticks)])
    cbar.ax.invert_yaxis()
    cbar.ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.5f'))

    ax.set_title(f"0.3C Charge [Discharged {C} C]")
    ax.set_xlabel("$x_n$")
    ax.set_ylabel("SoC [%]")
    plt.annotate(
        'Current collector', color='white',
        xy=(0.14, 0.25), xycoords='figure fraction',
        xytext=(0.22, 0.25), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    plt.annotate(
        'Separator', color='white',
        xy=(0.74, 0.25), xycoords='figure fraction',
        xytext=(0.53, 0.25), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    plt.tight_layout()
    fname = f"charge_0.3C_after_{C}C"
    fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
    plt.close(fig)
    plt.show()'''

############## ==================     %%%%     Porosity vs X- w.r.t SoC     %%%%%    =======================############
# =======================================-----------------------------------------=======================================


c_colors = {
    0.5: "midnightblue",
    2:   "teal",
}

fig, ax = plt.subplots(figsize=(8, 6), constrained_layout=True)
for idx, (C, Xd_discharge, Yd_discharge, por_discharge) in enumerate(all_X):
    if C not in [0.5, 2]:
        continue  # Skip 1C

    soc_d = Yd_discharge[:, 0]
    por_interp = interp1d(soc_d, por_discharge.T, axis=0, bounds_error=False, fill_value="extrapolate")

    Pdis85 = por_interp(85)
    Pdis90 = por_interp(90)
    Pdis95 = por_interp(95)

    ax.plot(xn, Pdis85, '-',  lw=3, color=c_colors[C])
    ax.plot(xn, Pdis90, '--', lw=3, color=c_colors[C])
    ax.plot(xn, Pdis95, ':',  lw=3, color=c_colors[C])

# C-rate legend (only 0.5C and 2C)
c_rate_legend = [
    Line2D([0], [0], color='midnightblue', marker='s',markersize=12,lw=3, linestyle='None',  label='0.5C'),
    Line2D([0], [0], color='teal',   marker='s',markersize=12,  lw=3, linestyle='None',  label='2C'),
]

# SoC legend: colors for each SoC
soc_legend = [
    Line2D([0], [0], color='black', lw=3, linestyle='-', label='SoC 85%'),
    Line2D([0], [0], color='black',  lw=3, linestyle='--', label='SoC 90%'),
    Line2D([0], [0], color='black',  lw=3, linestyle=':', label='SoC 95%')
]

# Place the legends
first_legend = ax.legend(handles=c_rate_legend, loc="lower right", frameon=False,fontsize=SMALL_SIZE)
ax.add_artist(first_legend)
second_legend = ax.legend(handles=soc_legend, loc="lower left", frameon=False, fontsize=SMALL_SIZE)

ax.set_xlabel("$x_n$")
ax.set_ylabel("Porosity")
ax.set_ylim(0.24936, 0.24970)
yticks = np.linspace(0.24940, 0.24965, 5)
ax.set_yticks(yticks)
ax.yaxis.set_major_formatter(FormatStrFormatter('%.5f'))
ax.fill_betweenx([0.24936, 0.249655], 0, 1, color="seashell", alpha=1)

plt.annotate(
    'Current collector', color='black',
    xy=(0.268, 0.86), xycoords='figure fraction',
    xytext=(0.36, 0.86), textcoords='figure fraction',
    arrowprops=dict(facecolor="black", width=3, headwidth=8),
    va='center', fontsize=20
)
plt.annotate(
    'Separator', color='black',
    xy=(0.91, 0.86), xycoords='figure fraction',
    xytext=(0.672, 0.86), textcoords='figure fraction',
    arrowprops=dict(facecolor="black", width=3, headwidth=8),
    va='center', fontsize=20
)
plt.tight_layout()
fname = "porosity_vs_xn_SoC"
fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
plt.show()






# $$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

# ─── Silicon fractions to sweep ─────────────────────────--------------------------------------------------------------

si_fracs = [0.015, 0.0375, 0.075]

results_dis, results_cha = [], []
for si in si_fracs:


    parameter_values.update({
        # *** Replace these keys with the exact names from your parameter set! ***
        "Primary: Negative electrode active material volume fraction": 0.75 - si,
        "Secondary: Negative electrode active material volume fraction": si,
        "Lithium plating transfer coefficient": 0.5,
        "Dead lithium decay constant [s-1]": 1e-4,
        "Primary: Maximum concentration in negative electrode [mol.m-3]": 28700,
        "Primary: Initial concentration in negative electrode [mol.m-3]": 23000,
        "Secondary: Initial concentration in negative electrode [mol.m-3]": 277000,
        "Secondary: Maximum concentration in negative electrode [mol.m-3]": 278000,
        # final updated parameter for BoL&EoL
        "Positive electrode LAM constant proportional term [s-1]": 1.7778e-07,
        "Primary: Negative electrode LAM constant proportional term [s-1]": 5.8778e-06,
        "Secondary: Negative electrode LAM constant proportional term [s-1]": 2.8778e-07,
        "Primary: Outer SEI solvent diffusivity [m2.s-1]": 2.5e-24,
        "Secondary: Outer SEI solvent diffusivity [m2.s-1]": 9.5e-22,
        "Secondary: Negative electrode partial molar volume [m3.mol-1]": 1.20e-05,
        "Positive electrode partial molar volume [m3.mol-1]": 1.2e-06,
    }, check_already_exists=False)

    exp = pybamm.Experiment([
        ("Discharge at 1C until 2.5V",
        "Charge at 0.3C until 4.2V (3 minute period)",
        "Hold at 4.2V until C/100 (3 minute period)",
        ),
    ] * 2)

    sim = pybamm.Simulation(
        model,
        experiment=exp,
        parameter_values=parameter_values,
        solver=pybamm.IDAKLUSolver(),
        discretisation_kwargs={"remove_independent_variables_from_rhs": True},
    )
    sol = sim.solve(calc_esoh=False)
    cyc2 = sol.cycles[1]

    # 3) Extract time, current, capacity, porosity

    I2 = cyc2["Current [A]"].entries
    Dc2 = cyc2["Discharge capacity [A.h]"].entries
    por2 = cyc2["Negative electrode porosity"].entries.T
    N_cap_si = parameter_values["Nominal cell capacity [A.h]"]

    d_cap_max = np.max(Dc2)

    por2_dis = por2[I2 > 0]
    por2_cha = por2[I2 < 0]

    soc_si = ((1 - Dc2 / d_cap_max) * 100)
    soc_si_dis = soc_si[I2 > 0]
    soc_si_cha = soc_si[I2 < 0]

    xn = np.linspace(0, 1, num=20)
    Xd, Yd = np.meshgrid(xn, soc_si_dis)
    Xc, Yc = np.meshgrid(xn, soc_si_cha)

    # ─── Collect ─────────────────────────
    results_dis.append((si, Xd, Yd, por2_dis))
    results_cha.append((si, Xc, Yc, por2_cha))

#=============================$$$$$$$$$$$$$$$$$$$$$$$$$===================================
# ─── Plot & save Charge contours ─────────────────────────

'''for si, Xc, Yc, por2_cha in results_cha:
    fig, ax = plt.subplots(figsize=(10, 6))
    cp = ax.contourf(
        Xc, Yc, por2_cha,
        levels=1000, cmap="plasma_r", antialiased=False,
        linewidths=0, edgecolors="none"
    )
    cbar = fig.colorbar(cp, label="Porosity")
    # Get colorbar axis limits
    cbar_ylim = cbar.ax.get_ylim()
    num_ticks = 8  # adjust as desired
    new_ticks = np.linspace(cbar_ylim[0], cbar_ylim[1], num=num_ticks)
    cbar.ax.set_yticks(new_ticks)
    # Set tick labels descending from high (bottom) to low (top)
    cbar.ax.set_yticklabels([f"{t:.5f}" for t in np.linspace(cp.norm.vmax, cp.norm.vmin, num=num_ticks)])
    cbar.ax.invert_yaxis()
    cbar.ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.5f'))
    sip = si / 0.75 * 100
    ax.set_title(f"1C Discharge — Si {sip:.1f}%")
    ax.set_xlabel("$x_n$")
    ax.set_ylabel("SoC [%]")

    # annotations
    ax.annotate(
        'Current collector', color='white',
        xy=(0.14, 0.25), xycoords='figure fraction',
        xytext=(0.22, 0.25), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    ax.annotate(
        'Separator', color='white',
        xy=(0.74, 0.25), xycoords='figure fraction',
        xytext=(0.53, 0.25), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )

    plt.tight_layout()

    # save both PNG and SVG
    filename_base = f"discharge_Si{sip:.1f}pct"
    fig.savefig(os.path.join(out_dir, filename_base + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, filename_base + ".svg"), dpi=1200)
    plt.close(fig)
    plt.show()

# ─── Plot & save Discharge contours ─────────────────────────

for si, Xd, Yd, por2_dis in results_dis:
    fig, ax = plt.subplots(figsize=(10, 6))
    cp = ax.contourf(
        Xd, Yd, por2_dis,
        levels=1000, cmap="plasma_r", antialiased=False,
        linewidths=0, edgecolors="none"
    )
    cbar = fig.colorbar(cp, label="Porosity")
    # Get colorbar axis limits
    cbar_ylim = cbar.ax.get_ylim()
    num_ticks = 8  # adjust as desired
    new_ticks = np.linspace(cbar_ylim[0], cbar_ylim[1], num=num_ticks)
    cbar.ax.set_yticks(new_ticks)
    # Set tick labels descending from high (bottom) to low (top)
    cbar.ax.set_yticklabels([f"{t:.5f}" for t in np.linspace(cp.norm.vmax, cp.norm.vmin, num=num_ticks)])
    cbar.ax.invert_yaxis()
    cbar.ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.5f'))
    sip = si / 0.75 * 100
    ax.set_title(f"0.3C Charge — Si {sip:.1f}%")
    ax.set_xlabel("$x_n$")
    ax.set_ylabel("SoC [%]")

    # annotations
    ax.annotate(
        'Current collector', color='white',
        xy=(0.14, 0.25), xycoords='figure fraction',
        xytext=(0.22, 0.25), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    ax.annotate(
        'Separator', color='white',
        xy=(0.74, 0.25), xycoords='figure fraction',
        xytext=(0.53, 0.25), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )

    plt.tight_layout()

    # save both PNG and SVG
    filename_base = f"charge_Si{sip:.1f}pct"
    fig.savefig(os.path.join(out_dir, filename_base + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, filename_base + ".svg"), dpi=1200)
    plt.close(fig)
    plt.show()'''

#==========================================Porosity vs Xn for Si fractions=========================================
# ─── Plotting porosity vs Xn for different Si fractions at specific SoC

si_colors = {
    0.015: "midnightblue",  # 2% Si
    0.075: "teal",       # 10% Si
}

fig, ax = plt.subplots(figsize=(8, 6))

for si, Xd, Yd, por2_dis in results_dis:
    if si not in [0.015, 0.075]:
        continue

    soc_si_dis = Yd[:, 0]
    try:
        por_interp = interp1d(soc_si_dis, por2_dis, axis=0, bounds_error=False, fill_value="extrapolate")
    except Exception as e:
        print(f"Interpolation error for Si {si*100:.1f}%: {e}")
        continue

    try:
        Pdis85 = por_interp(85)
        Pdis90 = por_interp(90)
        Pdis95 = por_interp(95)
    except Exception as e:
        print(f"Error evaluating interpolation for Si {si*100:.1f}%: {e}")
        continue

    ax.plot(Xd[0], Pdis85, '-',  lw=3, color=si_colors[si])
    ax.plot(Xd[0], Pdis90, '--', lw=3, color=si_colors[si])
    ax.plot(Xd[0], Pdis95, ':',  lw=3, color=si_colors[si])

# Legends for silicon fraction
si_legend = [
    Line2D([0], [0], color='royalblue', marker='s', lw=3, linestyle='None', label='2% Si'),
    Line2D([0], [0], color='teal', marker='s', lw=3, linestyle='None', label='10% Si'),
]

# Legends for SoC
soc_legend = [
    Line2D([0], [0], color='black', linestyle='-',  lw=3, label='SoC 85%'),
    Line2D([0], [0], color='black', linestyle='--', lw=3, label='SoC 90%'),
    Line2D([0], [0], color='black', linestyle=':',  lw=3, label='SoC 95%')
]

# Add legends to the plot
first_legend = ax.legend(handles=si_legend, loc='lower right', frameon=False, fontsize=SMALL_SIZE,
    bbox_to_anchor=(1, 0.1))
ax.add_artist(first_legend)
second_legend = ax.legend(handles=soc_legend, loc="lower left", frameon=False, fontsize=SMALL_SIZE,
    bbox_to_anchor=(0.0, 0.1))

ax.set_xlabel("$x_n$")
ax.set_ylabel("Porosity")

ax.set_ylim(0.2491, 0.2498)
yticks = np.linspace(0.24915, 0.24967, 5)
ax.set_yticks(yticks)
ax.yaxis.set_major_formatter(FormatStrFormatter('%.5f'))

# Highlight region
ax.fill_betweenx([0.2491, 0.2497], 0, 1, color="seashell", alpha=1)

# Annotations
plt.annotate(
    'Current collector', color='black',
    xy=(0.262, 0.86), xycoords='figure fraction',
    xytext=(0.36, 0.86), textcoords='figure fraction',
    arrowprops=dict(facecolor="black", width=3, headwidth=8),
    va='center', fontsize=20
)
plt.annotate(
    'Separator', color='black',
    xy=(0.91, 0.86), xycoords='figure fraction',
    xytext=(0.672, 0.86), textcoords='figure fraction',
    arrowprops=dict(facecolor="black", width=3, headwidth=8),
    va='center', fontsize=20
)

plt.tight_layout()
fig.savefig(os.path.join(out_dir, "Si_frac_porosity_lineplot_discharge.png"), dpi=1200)
fig.savefig(os.path.join(out_dir, "Si_frac_porosity_lineplot_discharge.svg"), dpi=1200)
plt.show()
