import os
import matplotlib.pyplot as plt
import numpy as np
import pybamm
import pandas as pd
import timeit
from matplotlib import style, cm, ticker
import matplotlib.patches as mpatches
from matplotlib.pyplot import figure
from sympy.abc import alpha
from matplotlib.ticker import FormatStrFormatter

# ─── Styling ─────────────────────────
style.use('ggplot')
pybamm.set_logging_level("INFO")

SMALL_SIZE = 20
MEDIUM_SIZE = 24
BIGGER_SIZE = 26
plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams['axes.facecolor'] = 'none'
plt.rcParams['axes.edgecolor'] = 'black'
plt.rc('font', size=MEDIUM_SIZE)
plt.rc('axes', titlesize=MEDIUM_SIZE)
plt.rc('axes', labelsize=MEDIUM_SIZE)
plt.rc('xtick', labelsize=MEDIUM_SIZE)
plt.rc('ytick', labelsize=MEDIUM_SIZE)
plt.rc('legend', fontsize=SMALL_SIZE)
plt.rc('figure', titlesize=BIGGER_SIZE)

# ======================%%%  File path   %%%========================
out_dir = r"E:\MTP project\Results\porousAnodeResult\16.7.25\contour"
os.makedirs(out_dir, exist_ok=True)

# ─── Build model & parameters ─────────────────────────
model = pybamm.lithium_ion.DFN({
    "particle phases": ("2", "1"),
    "open-circuit potential": (("single", "current sigmoid"), "single"),
    "particle mechanics": ("swelling only", "none"),
    "loss of active material": ("stress-driven", "none"),
    "SEI": "solvent-diffusion limited",
    "SEI porosity change": "true",
    "particle": "Fickian diffusion",
    "cell geometry": "arbitrary",
    "lithium plating": "partially reversible",
    "lithium plating porosity change": "true",
})
parameter_values = pybamm.ParameterValues("Chen2020_composite")

parameter_values.update({
    "Lithium plating transfer coefficient": 0.5,
    "Dead lithium decay constant [s-1]": 1e-4,
    "Primary: Maximum concentration in negative electrode [mol.m-3]": 28700,
    "Primary: Initial concentration in negative electrode [mol.m-3]": 23000,
    "Secondary: Initial concentration in negative electrode [mol.m-3]": 277000,
    "Secondary: Maximum concentration in negative electrode [mol.m-3]": 278000,

    "Positive electrode LAM constant proportional term [s-1]": 1.7778e-07,
    "Primary: Negative electrode LAM constant proportional term [s-1]": 5.8778e-06,
    "Secondary: Negative electrode LAM constant proportional term [s-1]": 2.8778e-07,
    "Primary: Outer SEI solvent diffusivity [m2.s-1]": 2.5e-24,
    "Secondary: Outer SEI solvent diffusivity [m2.s-1]": 9.5e-22,
    "Secondary: Negative electrode partial molar volume [m3.mol-1]": 1.20e-05,
    "Positive electrode partial molar volume [m3.mol-1]": 1.2e-06,

}, check_already_exists=False)

# ─── C‐rates to sweep ─────────────────────────
c_rates = [0.5, 1, 2]

# Containers to collect results
all_X, all_Y, all_por = [], [], []

for C in c_rates:
    # ─── Experiment for this C-rate ─────────────────────────
    exp = pybamm.Experiment([
                                (f"Discharge at {C}C until 2.5V",
                                 "Charge at 0.3C until 4.2V (3 minute period)",
                                 "Hold at 4.2V until C/100 (3 minute period)",
                                 ),
                            ] * 2)

    sim = pybamm.Simulation(
        model,
        experiment=exp,
        parameter_values=parameter_values,
        solver=pybamm.IDAKLUSolver(),
        discretisation_kwargs={"remove_independent_variables_from_rhs": True},
    )
    sol = sim.solve(calc_esoh=False)

    D_cap = sol["Discharge capacity [A.h]"].entries
    cycle2 = sol.cycles[1]

    # ─── Extract raw data ─────────────────────────
    t_full = cycle2["Time [h]"].entries
    I_full = cycle2["Current [A]"].entries
    Dc_full = cycle2["Discharge capacity [A.h]"].entries
    por_full = cycle2["Negative electrode porosity"].data
    N_cap = parameter_values["Nominal cell capacity [A.h]"]
    Dc_full_max = np.max(Dc_full)

    soc = ((1 - Dc_full / Dc_full_max) * 100)
    # soc_2 = np.where(I_full > 0, soc, -soc)
    soc_d = soc[I_full > 0]
    soc_c = soc[I_full < 0]

    # ─── Separate Charge and Discharge Data ─────────────────────────
    # Discharge data (current > 0)
    t_discharge = t_full[I_full > 0]
    I_discharge = I_full[I_full > 0]
    Dc_discharge = Dc_full[I_full > 0]
    por_discharge = por_full[:, I_full > 0]
    # soc_discharge = soc_d[I_full > 0]

    # Charge data (current < 0) - Note that the hold phase also has current close to 0
    # You might need to refine the condition for "charge" if the hold phase needs to be explicitly excluded
    t_charge = t_full[I_full < 0]
    I_charge = I_full[I_full < 0]
    Dc_charge = Dc_full[I_full < 0]
    por_charge = por_full[:, I_full < 0]
    # soc_charge = soc_2[I_full < 0]

    # ─── Meshgrids ─────────────────────────
    # You can create separate meshgrids for discharge and charge if needed
    xn = np.linspace(0, 1, num=20)
    Xd_discharge, Yd_discharge = np.meshgrid(xn, soc_d)
    Xd_charge, Yd_charge = np.meshgrid(xn, soc_c)
    all_X.append((C, Xd_discharge, Yd_discharge, por_discharge))
    all_Y.append((C, Xd_charge, Yd_charge, por_charge))

# Plotting discharge data
for C, Xd_discharge, Yd_discharge, por_discharge in all_X:
    fig, ax = plt.subplots(figsize=(10, 6))
    cp = ax.contourf(
        Xd_discharge, Yd_discharge, por_discharge.T,
        levels=1000, cmap="plasma_r", antialiased=False,
        linewidths=0, edgecolors="none"
    )
    fig.colorbar(cp, label="Porosity")
    ax.set_title(f"Discharge @ {C} C")
    ax.set_xlabel("$x_n$")
    ax.set_ylabel("SOC [%]")

    # ax.set_yticks([0, 20, 40, 60, 80, 100])
    plt.annotate(
        'Current collector', color='white',
        xy=(0.14, 0.8), xycoords='figure fraction',
        xytext=(0.22, 0.8), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    plt.annotate(
        'Separator', color='white',
        xy=(0.73, 0.8), xycoords='figure fraction',
        xytext=(0.53, 0.8), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    plt.tight_layout()
    fname = f"discharge_{C}C"
    fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
    plt.close(fig)
    plt.show()

# Plotting charge data
for C, Xd_charge, Yd_charge, por_charge in all_Y:
    fig, ax = plt.subplots(figsize=(10, 6))
    cp = ax.contourf(
        Xd_charge, Yd_charge, por_charge.T,
        levels=1000, cmap="plasma_r", antialiased=False,
        linewidths=0, edgecolors="none"
    )
    fig.colorbar(cp, label="Porosity")
    ax.set_title(f"Charge 0.3C  [Discharged {C} C]")
    ax.set_xlabel("$x_n$")
    ax.set_ylabel("SOC [%]")
    # ax.set_ylim(0, 100)
    # ax.set_yticks([0, 20, 40, 60, 80, 100])
    plt.annotate(
        'Current collector', color='white',
        xy=(0.14, 0.8), xycoords='figure fraction',
        xytext=(0.22, 0.8), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    plt.annotate(
        'Separator', color='white',
        xy=(0.73, 0.8), xycoords='figure fraction',
        xytext=(0.53, 0.8), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    plt.tight_layout()
    fname = f"charge_0.3C_after_{C}C"
    fig.savefig(os.path.join(out_dir, fname + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, fname + ".svg"), dpi=1200)
    plt.close(fig)
    plt.show()

# $$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%$$$$$$$$$$$$$$$$$$$$$$$$$$%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

# ─── Silicon fractions to sweep ─────────────────────────--------------------------------------------------------------

si_fracs = [0.015, 0.0375, 0.075]

results_dis, results_cha = [], []
for si in si_fracs:


    parameter_values.update({
        # *** Replace these keys with the exact names from your parameter set! ***
        "Primary: Negative electrode active material volume fraction": 0.75 - si,
        "Secondary: Negative electrode active material volume fraction": si,

        "Positive electrode LAM constant proportional term [s-1]": 1.7778e-07,
        "Primary: Negative electrode LAM constant proportional term [s-1]": 5.8778e-06,
        "Secondary: Negative electrode LAM constant proportional term [s-1]": 2.8778e-07,
        "Primary: Outer SEI solvent diffusivity [m2.s-1]": 2.5e-24,
        "Secondary: Outer SEI solvent diffusivity [m2.s-1]": 9.5e-22,
        "Secondary: Negative electrode partial molar volume [m3.mol-1]": 1.20e-05,
        "Positive electrode partial molar volume [m3.mol-1]": 1.2e-06,
    }, check_already_exists=False)

    exp = pybamm.Experiment([
        ("Discharge at 1C until 2.5V",
        "Charge at 0.3C until 4.2V (3 minute period)",
        "Hold at 4.2V until C/100 (3 minute period)",
        ),
    ] * 2)

    sim = pybamm.Simulation(
        model,
        experiment=exp,
        parameter_values=parameter_values,
        solver=pybamm.IDAKLUSolver(),
        discretisation_kwargs={"remove_independent_variables_from_rhs": True},
    )
    sol = sim.solve(calc_esoh=False)
    cyc2 = sol.cycles[1]

    # 3) Extract time, current, capacity, porosity

    I2 = cyc2["Current [A]"].entries
    Dc2 = cyc2["Discharge capacity [A.h]"].entries
    por2 = cyc2["Negative electrode porosity"].entries.T
    N_cap_si = parameter_values["Nominal cell capacity [A.h]"]

    d_cap_max = np.max(Dc2)

    por2_dis = por2[I2 > 0]
    por2_cha = por2[I2 < 0]

    soc_si = ((1 - Dc2 / d_cap_max) * 100)
    soc_si_dis = soc_si[I2 > 0]
    soc_si_cha = soc_si[I2 < 0]

    xn = np.linspace(0, 1, num=20)
    Xd, Yd = np.meshgrid(xn, soc_si_dis)
    Xc, Yc = np.meshgrid(xn, soc_si_cha)

    # ─── Collect ─────────────────────────
    results_dis.append((si, Xd, Yd, por2_dis))
    results_cha.append((si, Xc, Yc, por2_cha))

#=============================$$$$$$$$$$$$$$$$$$$$$$$$$===================================
# ─── Plot & save Charge contours ─────────────────────────

for si, Xc, Yc, por2_cha in results_cha:
    fig, ax = plt.subplots(figsize=(10, 6))
    cp = ax.contourf(
        Xc, Yc, por2_cha,
        levels=1000, cmap="plasma_r", antialiased=False,
        linewidths=0, edgecolors="none"
    )
    fig.colorbar(cp, label="Porosity")
    sip = si / 0.75 * 100
    ax.set_title(f"1C Discharge — Si {sip:.1f}%")
    ax.set_xlabel("$x_n$")
    ax.set_ylabel("SOC [%]")

    # annotations
    ax.annotate(
        'Current collector', color='white',
        xy=(0.14, 0.8), xycoords='figure fraction',
        xytext=(0.22, 0.8), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    ax.annotate(
        'Separator', color='white',
        xy=(0.73, 0.8), xycoords='figure fraction',
        xytext=(0.53, 0.8), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )

    plt.tight_layout()

    # save both PNG and SVG
    filename_base = f"discharge_Si{sip:.1f}pct"
    fig.savefig(os.path.join(out_dir, filename_base + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, filename_base + ".svg"), dpi=1200)
    plt.close(fig)
    plt.show()

# ─── Plot & save Discharge contours ─────────────────────────

for si, Xd, Yd, por2_dis in results_dis:
    fig, ax = plt.subplots(figsize=(10, 6))
    cp = ax.contourf(
        Xd, Yd, por2_dis,
        levels=1000,cmap= "plasma_r" , antialiased=False,
        linewidths=0, edgecolors="none"
    )
    fig.colorbar(cp, label="Porosity")
    sip = si / 0.75 * 100
    ax.set_title(f"0.3C Charge — Si {sip:.1f}%")
    ax.set_xlabel("$x_n$")
    ax.set_ylabel("SOC [%]")

    # annotations
    ax.annotate(
        'Current collector', color='white',
        xy=(0.14, 0.8), xycoords='figure fraction',
        xytext=(0.22, 0.8), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )
    ax.annotate(
        'Separator', color='white',
        xy=(0.73, 0.8), xycoords='figure fraction',
        xytext=(0.53, 0.8), textcoords='figure fraction',
        arrowprops=dict(facecolor="white", width=3, headwidth=8),
        va='center', fontsize=20
    )

    plt.tight_layout()

    # save both PNG and SVG
    filename_base = f"charge_Si{sip:.1f}pct"
    fig.savefig(os.path.join(out_dir, filename_base + ".png"), dpi=1200)
    fig.savefig(os.path.join(out_dir, filename_base + ".svg"), dpi=1200)
    plt.close(fig)
    plt.show()
