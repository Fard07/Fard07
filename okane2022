import pybamm
import numpy as np
import matplotlib.pyplot as plt

# Define number of cycles
Cycles = 1170

# Define experiment
experiment = pybamm.Experiment(
    [
        (
            "Discharge at 1C until 2.5V",
            "Charge at 0.3C until 4.2V (3 minute period)",
            "Hold at 4.2V until C/100 (3 minute period)"
        )
    ] * Cycles
)

# Define model
model = pybamm.lithium_ion.DFN(
    options={
        "particle": "Fickian diffusion",
        "cell geometry": "arbitrary",
        "thermal": "lumped",
        "particle mechanics": "swelling only",
        "SEI": "solvent-diffusion limited",
        "SEI film resistance": "distributed",
        "calculate discharge energy": "true",
        "loss of active material": "stress-driven",
    }
)

# Load and update parameters
param = pybamm.ParameterValues("OKane2022")
param.update({
    "SEI solvent diffusivity [m2.s-1]": 2.5e-20,
    "Negative electrode LAM constant proportional term [s-1]": 5.7778e-06,
    "Positive electrode LAM constant proportional term [s-1]": 9.7778e-06,
})

# Create and solve simulation
sim = pybamm.Simulation(model, parameter_values=param, experiment=experiment, solver=pybamm.IDAKLUSolver())
solution = sim.solve()

# Estimate cycle duration
total_time = solution["Time [s]"].entries[-1]
cycle_duration = total_time / Cycles

# Function to get mask for discharge step in a cycle
def get_discharge_mask(solution, cycle_index, cycle_duration):
    t = solution["Time [s]"].entries
    current = solution["Current [A]"].entries
    start = (cycle_index - 1) * cycle_duration
    end = start + cycle_duration / 3  # Approximate discharge duration
    return (t >= start) & (t < end) & (current > 0.01)

# Extract data
voltage = solution["Terminal voltage [V]"].entries
capacity = solution["Discharge capacity [A.h]"].entries

bol_mask = get_discharge_mask(solution, 1, cycle_duration)
eol_mask = get_discharge_mask(solution, Cycles, cycle_duration)

# Plot Voltage vs Capacity
plt.figure(figsize=(8, 5))
if bol_mask.any():
    plt.plot(capacity[bol_mask], voltage[bol_mask], label="BOL (Cycle 1)")
else:
    print("⚠️ No BOL data found.")

if eol_mask.any():
    plt.plot(capacity[eol_mask], voltage[eol_mask], label=f"EOL (Cycle {Cycles})")
else:
    print("⚠️ No EOL data found.")

plt.xlabel("Discharge Capacity [A.h]", fontsize=14)
plt.ylabel("Terminal Voltage [V]", fontsize=14)
plt.title("Voltage vs Discharge Capacity", fontsize=16)
plt.legend(fontsize=12)
plt.grid(False)
plt.tick_params(labelsize=12)
plt.tight_layout()
plt.savefig("voltage_vs_capacity.png", dpi=300)
plt.show()

# Analyze LLI and LAM over charge throughput
LLI = np.zeros(Cycles)
LAM_neg = np.zeros(Cycles)
LAM_pos = np.zeros(Cycles)
throughput = np.zeros(Cycles)

time = solution["Time [s]"].entries
current = solution["Current [A]"].entries

for i in range(1, Cycles + 1):
    start = (i - 1) * cycle_duration
    end = i * cycle_duration
    idx = (time >= start) & (time < end)
    t_mid = time[idx]
    I_mid = current[idx]

    Q_charge = -np.trapezoid(I_mid[I_mid < 0], t_mid[I_mid < 0]) / 3600  # [Ah]
    throughput[i - 1] = throughput[i - 2] + Q_charge if i > 1 else Q_charge

    idx_end = np.where(time >= end)[0][0]
    LLI[i - 1] = solution["Loss of lithium inventory [%]"].entries[idx_end]
    LAM_neg[i - 1] = solution["Loss of active material in negative electrode [%]"].entries[idx_end]
    LAM_pos[i - 1] = solution["Loss of active material in positive electrode [%]"].entries[idx_end]

# Plot LLI vs Charge Throughput
plt.figure(figsize=(8, 5))
plt.plot(throughput, LLI, label="LLI")
plt.xlabel("Charge Throughput [Ah]", fontsize=14)
plt.ylabel("LLI [%]", fontsize=14)
plt.title("Loss of Lithium Inventory vs Charge Throughput", fontsize=16)
plt.grid(True)
plt.tight_layout()
plt.savefig("lli_vs_throughput.png", dpi=300)
plt.show()

# Plot LAM vs Charge Throughput
plt.figure(figsize=(8, 5))
plt.plot(throughput, LAM_neg, label="LAM - Negative Electrode")
plt.plot(throughput, LAM_pos, label="LAM - Positive Electrode")
plt.xlabel("Charge Throughput [Ah]", fontsize=14)
plt.ylabel("LAM [%]", fontsize=14)
plt.title("Loss of Active Material vs Charge Throughput", fontsize=16)
plt.legend(fontsize=12)
plt.grid(True)
plt.tight_layout()
plt.savefig("lam_vs_throughput.png", dpi=300)
plt.show()
